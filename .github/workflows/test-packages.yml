name: Test Package Managers

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Test weekly to catch package manager changes
    - cron: '0 2 * * 0'

jobs:
  # Test native package managers on their respective OS
  test-native-packages:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS - Homebrew
          - os: macos-latest
            package_manager: homebrew
            install_cmd: "brew install repobird/tap/repobird"
            update_cmd: "brew upgrade repobird"
            uninstall_cmd: "brew uninstall repobird"
            version_cmd: "repobird version"
            setup_cmd: "brew tap repobird/tap"
            
          # Ubuntu - APT
          - os: ubuntu-latest
            package_manager: apt
            setup_cmd: |
              curl -fsSL https://apt.repobird.ai/gpg | sudo apt-key add -
              echo "deb https://apt.repobird.ai stable main" | sudo tee /etc/apt/sources.list.d/repobird.list
              sudo apt update
            install_cmd: "sudo apt install -y repobird"
            update_cmd: "sudo apt upgrade -y repobird"
            uninstall_cmd: "sudo apt remove -y repobird"
            version_cmd: "repobird version"
            
          # Ubuntu - Snap
          - os: ubuntu-latest
            package_manager: snap
            install_cmd: "sudo snap install repobird"
            update_cmd: "sudo snap refresh repobird"
            uninstall_cmd: "sudo snap remove repobird"
            version_cmd: "repobird version"
            setup_cmd: "sudo snap install hello-world" # Test snap is working
            
          # Windows - Chocolatey
          - os: windows-latest
            package_manager: chocolatey
            setup_cmd: |
              Set-ExecutionPolicy Bypass -Scope Process -Force
              [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
              iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
            install_cmd: "choco install repobird -y"
            update_cmd: "choco upgrade repobird -y"
            uninstall_cmd: "choco uninstall repobird -y"
            version_cmd: "repobird version"
            
          # Windows - Scoop
          - os: windows-latest
            package_manager: scoop
            setup_cmd: |
              Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
              Invoke-RestMethod get.scoop.sh | Invoke-Expression
              scoop bucket add repobird https://github.com/repobird/scoop-bucket
            install_cmd: "scoop install repobird"
            update_cmd: "scoop update repobird"
            uninstall_cmd: "scoop uninstall repobird"
            version_cmd: "repobird version"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Package Manager
        shell: bash
        run: |
          echo "Setting up ${{ matrix.package_manager }}..."
          if [ -n "${{ matrix.setup_cmd }}" ]; then
            if [ "${{ matrix.os }}" = "windows-latest" ]; then
              powershell -Command "${{ matrix.setup_cmd }}"
            else
              ${{ matrix.setup_cmd }}
            fi
          fi

      - name: Test Package Installation
        shell: bash
        run: |
          echo "Installing package with ${{ matrix.package_manager }}..."
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            powershell -Command "${{ matrix.install_cmd }}"
          else
            ${{ matrix.install_cmd }}
          fi
          
          # Verify installation
          echo "Verifying installation..."
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            powershell -Command "${{ matrix.version_cmd }}"
          else
            ${{ matrix.version_cmd }}
          fi

      - name: Test Package Update
        shell: bash
        run: |
          echo "Testing package update with ${{ matrix.package_manager }}..."
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            powershell -Command "${{ matrix.update_cmd }}" || echo "Update test completed (may have no updates)"
          else
            ${{ matrix.update_cmd }} || echo "Update test completed (may have no updates)"
          fi

      - name: Test Package Functionality
        shell: bash
        run: |
          echo "Testing basic functionality..."
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            powershell -Command "repobird --help"
            powershell -Command "repobird version"
          else
            repobird --help
            repobird version
          fi

      - name: Test Package Uninstallation
        shell: bash
        run: |
          echo "Uninstalling package..."
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            powershell -Command "${{ matrix.uninstall_cmd }}"
          else
            ${{ matrix.uninstall_cmd }}
          fi
          
          # Verify uninstallation (should fail)
          echo "Verifying uninstallation..."
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ! powershell -Command "repobird version" 2>/dev/null && echo "Uninstall verified" || echo "WARNING: Package may still be installed"
          else
            ! command -v repobird >/dev/null 2>&1 && echo "Uninstall verified" || echo "WARNING: Package may still be installed"
          fi

  # Test Linux package managers in containers
  test-container-packages:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Fedora - DNF/YUM
          - container: fedora:latest
            package_manager: dnf
            setup_cmd: |
              dnf install -y curl gnupg2
              curl -fsSL https://yum.repobird.ai/gpg | gpg --import
              cat > /etc/yum.repos.d/repobird.repo << EOF
              [repobird]
              name=RepoBird CLI Repository
              baseurl=https://yum.repobird.ai
              enabled=1
              gpgcheck=1
              gpgkey=https://yum.repobird.ai/gpg
              EOF
            install_cmd: "dnf install -y repobird"
            update_cmd: "dnf update -y repobird"
            uninstall_cmd: "dnf remove -y repobird"
            version_cmd: "repobird version"
            
          # CentOS 8 - YUM
          - container: centos:8
            package_manager: yum
            setup_cmd: |
              sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
              sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
              yum install -y curl gnupg2
              curl -fsSL https://yum.repobird.ai/gpg | gpg --import
              cat > /etc/yum.repos.d/repobird.repo << EOF
              [repobird]
              name=RepoBird CLI Repository
              baseurl=https://yum.repobird.ai
              enabled=1
              gpgcheck=1
              gpgkey=https://yum.repobird.ai/gpg
              EOF
            install_cmd: "yum install -y repobird"
            update_cmd: "yum update -y repobird"
            uninstall_cmd: "yum remove -y repobird"
            version_cmd: "repobird version"
            
          # Arch Linux - AUR
          - container: archlinux:latest
            package_manager: aur
            setup_cmd: |
              pacman -Sy --noconfirm
              pacman -S --noconfirm base-devel git sudo
              useradd -m aur
              echo 'aur ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
              su - aur -c "git clone https://aur.archlinux.org/yay.git && cd yay && makepkg -si --noconfirm"
            install_cmd: "su - aur -c 'yay -S --noconfirm repobird-bin'"
            update_cmd: "su - aur -c 'yay -Syu --noconfirm repobird-bin'"
            uninstall_cmd: "su - aur -c 'yay -R --noconfirm repobird-bin'"
            version_cmd: "repobird version"
            
          # Debian - APT
          - container: debian:latest
            package_manager: apt-debian
            setup_cmd: |
              apt update
              apt install -y curl gnupg2
              curl -fsSL https://apt.repobird.ai/gpg | apt-key add -
              echo "deb https://apt.repobird.ai stable main" > /etc/apt/sources.list.d/repobird.list
              apt update
            install_cmd: "apt install -y repobird"
            update_cmd: "apt upgrade -y repobird"
            uninstall_cmd: "apt remove -y repobird"
            version_cmd: "repobird version"

    container: ${{ matrix.container }}
    
    steps:
      - name: Setup Package Manager
        run: |
          echo "Setting up ${{ matrix.package_manager }}..."
          ${{ matrix.setup_cmd }}

      - name: Test Package Installation
        run: |
          echo "Installing package with ${{ matrix.package_manager }}..."
          ${{ matrix.install_cmd }}
          
          # Verify installation
          echo "Verifying installation..."
          ${{ matrix.version_cmd }}

      - name: Test Package Update
        run: |
          echo "Testing package update..."
          ${{ matrix.update_cmd }} || echo "Update test completed (may have no updates)"

      - name: Test Package Functionality
        run: |
          echo "Testing basic functionality..."
          repobird --help
          repobird version

      - name: Test Package Uninstallation
        run: |
          echo "Uninstalling package..."
          ${{ matrix.uninstall_cmd }}
          
          # Verify uninstallation (should fail)
          echo "Verifying uninstallation..."
          ! command -v repobird >/dev/null 2>&1 && echo "Uninstall verified" || echo "WARNING: Package may still be installed"

  # Test manual installation methods
  test-manual-installation:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test One-liner Install Script (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          # Test the install script
          curl -fsSL https://get.repobird.ai | sh
          repobird version
          
          # Test uninstall
          rm -f ~/.local/bin/repobird ~/.local/bin/rb

      - name: Test PowerShell Install Script (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          # Test the PowerShell install script
          iwr -useb https://get.repobird.ai/windows | iex
          repobird version
          
          # Test uninstall
          Remove-Item -Path "$env:USERPROFILE\.local\bin\repobird.exe" -ErrorAction SilentlyContinue

      - name: Test Manual Binary Download
        shell: bash
        run: |
          # Determine platform
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            PLATFORM="linux_amd64"
            EXT="tar.gz"
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            PLATFORM="darwin_amd64"
            EXT="tar.gz"
          else
            PLATFORM="windows_amd64"
            EXT="zip"
          fi
          
          # Download latest release
          LATEST_VERSION=$(curl -s https://api.github.com/repos/repobird/repobird-cli/releases/latest | grep '"tag_name":' | cut -d'"' -f4)
          
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            curl -L -o "repobird.zip" "https://github.com/repobird/repobird-cli/releases/download/${LATEST_VERSION}/repobird_${PLATFORM}.zip"
            unzip repobird.zip
            ./repobird.exe version
          else
            curl -L -o "repobird.tar.gz" "https://github.com/repobird/repobird-cli/releases/download/${LATEST_VERSION}/repobird_${PLATFORM}.tar.gz"
            tar -xzf repobird.tar.gz
            ./repobird version
          fi

  # Test package signing verification
  test-package-verification:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Import GPG Key
        run: |
          curl -fsSL https://keys.repobird.ai/signing.asc | gpg --import

      - name: Test Package Signature Verification
        run: |
          # Download latest release and signature
          LATEST_VERSION=$(curl -s https://api.github.com/repos/repobird/repobird-cli/releases/latest | grep '"tag_name":' | cut -d'"' -f4)
          
          curl -L -o "repobird_linux_amd64.tar.gz" "https://github.com/repobird/repobird-cli/releases/download/${LATEST_VERSION}/repobird_linux_amd64.tar.gz"
          curl -L -o "repobird_linux_amd64.tar.gz.asc" "https://github.com/repobird/repobird-cli/releases/download/${LATEST_VERSION}/repobird_linux_amd64.tar.gz.asc"
          
          # Verify signature
          gpg --verify repobird_linux_amd64.tar.gz.asc repobird_linux_amd64.tar.gz

      - name: Test Checksum Verification
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/repobird/repobird-cli/releases/latest | grep '"tag_name":' | cut -d'"' -f4)
          
          curl -L -o "checksums.txt" "https://github.com/repobird/repobird-cli/releases/download/${LATEST_VERSION}/checksums.txt"
          
          # Verify checksum
          grep "repobird_linux_amd64.tar.gz" checksums.txt | sha256sum -c

  # Performance and load testing
  test-installation-performance:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Benchmark Installation Time
        shell: bash
        run: |
          echo "Testing installation performance..."
          
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            # Test APT installation time
            time (curl -fsSL https://get.repobird.ai | sh)
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            # Test Homebrew installation time  
            time (brew tap repobird/tap && brew install repobird)
          else
            # Test Chocolatey installation time
            time powershell -Command "choco install repobird -y"
          fi

      - name: Test Multiple Concurrent Installations
        shell: bash
        run: |
          echo "Testing concurrent installation handling..."
          
          # Create multiple installation attempts
          for i in {1..3}; do
            (
              if [ "${{ matrix.os }}" = "windows-latest" ]; then
                powershell -Command "iwr -useb https://get.repobird.ai/windows | iex" > install_$i.log 2>&1
              else
                curl -fsSL https://get.repobird.ai | sh > install_$i.log 2>&1
              fi
            ) &
          done
          
          wait
          
          # Check all installations succeeded
          for i in {1..3}; do
            echo "Installation $i results:"
            cat install_$i.log
          done

  # Integration testing with common tools
  test-tool-integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install via APT
        run: |
          curl -fsSL https://get.repobird.ai | sh

      - name: Test Shell Completions
        run: |
          # Test bash completion
          repobird completion bash > /tmp/repobird_completion.bash
          source /tmp/repobird_completion.bash
          
          # Test zsh completion
          repobird completion zsh > /tmp/_repobird
          
          # Test fish completion
          repobird completion fish > /tmp/repobird.fish

      - name: Test Integration with Common CI Tools
        run: |
          # Test with Docker
          echo 'FROM ubuntu:latest
          RUN apt update && apt install -y curl
          RUN curl -fsSL https://get.repobird.ai | sh
          RUN repobird version' > Dockerfile
          
          docker build -t repobird-test .
          docker run --rm repobird-test

      - name: Test Configuration Management
        run: |
          # Test config commands
          repobird config set api-key test-key-123
          repobird config get api-key
          repobird config list
          
          # Test auth workflow (without actual API calls)
          echo "test" | repobird auth info || true