name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.22', '1.23', '1.24']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: make test
      env:
        REPOBIRD_API_URL: http://localhost:3000
        XDG_CONFIG_HOME: /tmp/test-config

    - name: Run integration tests
      if: matrix.os == 'ubuntu-latest'
      run: make test-integration
      env:
        REPOBIRD_API_URL: http://localhost:3000
        XDG_CONFIG_HOME: /tmp/test-config

    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
      run: |
        make coverage
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

    - name: Check formatting
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Go files are not formatted:"
          gofmt -l .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Build binary
      run: make build

    - name: Test binary execution
      run: |
        ./build/repobird version
        ./build/repobird --help
      shell: bash

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: repobird-${{ matrix.os }}
        path: build/repobird*

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Run gosec security scanner
      uses: securego/gosec@master
      with:
        args: './...'

    - name: Run vulnerability check
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  validate-pr:
    name: Validate PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Check for uncommitted changes
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

    - name: Validate commit messages
      uses: wagoid/commitlint-github-action@v5
      with:
        configFile: .commitlintrc.yml
      continue-on-error: true