package views

import (
	"time"

	"github.com/charmbracelet/bubbles/help"
	"github.com/charmbracelet/bubbles/textarea"
	"github.com/charmbracelet/bubbles/textinput"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/repobird/repobird-cli/internal/config"
	"github.com/repobird/repobird-cli/internal/models"
	"github.com/repobird/repobird-cli/internal/tui/cache"
	"github.com/repobird/repobird-cli/internal/tui/components"
	"github.com/repobird/repobird-cli/internal/tui/debug"
)

type CreateRunView struct {
	client        APIClient
	keys          components.KeyMap
	help          help.Model
	width         int
	height        int
	focusIndex    int
	fields        []textinput.Model
	promptArea    textarea.Model
	contextArea   textarea.Model
	submitting    bool
	error         error
	success       bool
	createdRun    *models.RunResponse
	useFileInput  bool
	filePathInput textinput.Model
	// Input mode tracking
	inputMode     components.InputMode
	exitRequested bool
	// Back button
	backButtonFocused bool
	// Submit button
	submitButtonFocused bool
	// Error handling
	errorButtonFocused bool
	errorRowFocused    bool // For selecting the error message row
	// State preservation when returning from error
	prevFocusIndex          int
	prevBackButtonFocused   bool
	prevSubmitButtonFocused bool
	// Unified status line component
	statusLine *components.StatusLine
	// Clipboard feedback (still need blink timing)
	yankBlink     bool
	yankBlinkTime time.Time
	// Cache from parent list view
	parentRuns         []models.RunResponse
	parentCached       bool
	parentCachedAt     time.Time
	parentDetailsCache map[string]*models.RunResponse
	// Repository selector
	repoSelector *components.RepositorySelector
	// FZF mode for repository selection
	fzfMode   *components.FZFMode
	fzfActive bool
	// Prompt collapsed state
	promptCollapsed bool
	showContext     bool // Whether to show context field
	// Run type toggle
	runType models.RunType
	// Config file loading
	configLoader             *config.ConfigLoader
	fileSelector             *components.FileSelector
	configFileSelector       *components.ConfigFileSelector
	lastLoadedFile           string
	configFileSelectorActive bool
	fileSelectorLoading      bool
	// Reset confirmation state
	resetConfirmMode bool
	// Vim keybinding state for 'gg' command
	lastGPressTime time.Time // Time when 'g' was last pressed
	waitingForG    bool      // Whether we're waiting for second 'g' in 'gg' command
	// File hash tracking for duplicate detection
	currentFileHash string
	isDuplicateRun  bool
	// Submission state tracking
	isSubmitting    bool
	submitStartTime time.Time
	// Duplicate run confirmation state
	isDuplicateConfirm bool
	duplicateRunID     string
	pendingTask        models.RunRequest
	// Embedded cache
	cache *cache.SimpleCache
}

func NewCreateRunView(client APIClient) *CreateRunView {
	// Create new cache instance
	cache := cache.NewSimpleCache()
	_ = cache.LoadFromDisk()
	return NewCreateRunViewWithCache(client, nil, false, time.Time{}, nil, cache)
}

// CreateRunViewConfig holds configuration for creating a new CreateRunView
type CreateRunViewConfig struct {
	Client             APIClient
	ParentRuns         []models.RunResponse
	ParentCached       bool
	ParentCachedAt     time.Time
	ParentDetailsCache map[string]*models.RunResponse
	SelectedRepository string             // Pre-selected repository from dashboard
	Cache              *cache.SimpleCache // Optional embedded cache
}

// NewCreateRunViewWithConfig creates a new CreateRunView with the given configuration
func NewCreateRunViewWithConfig(cfg CreateRunViewConfig) *CreateRunView {
	debug.LogToFile("DEBUG: NewCreateRunViewWithConfig called\n")

	// Use provided cache or create new one
	embeddedCache := cfg.Cache
	if embeddedCache == nil {
		embeddedCache = cache.NewSimpleCache()
		_ = embeddedCache.LoadFromDisk()
	}

	view := &CreateRunView{
		client:             cfg.Client,
		keys:               components.DefaultKeyMap,
		help:               help.New(),
		parentRuns:         cfg.ParentRuns,
		parentCached:       cfg.ParentCached,
		parentCachedAt:     cfg.ParentCachedAt,
		parentDetailsCache: cfg.ParentDetailsCache,
		cache:              embeddedCache,
		runType:            models.RunTypeRun,
		inputMode:          components.NormalMode,
	}

	// Initialize components
	// TODO: These functions are in create_input.go and create_config.go
	// view.initializeInputFields()
	// view.loadFormData()

	// Auto-fill repository if selected from dashboard
	if cfg.SelectedRepository != "" && len(view.fields) >= 1 && view.fields[0].Value() == "" {
		view.fields[0].SetValue(cfg.SelectedRepository)
		debug.LogToFilef("DEBUG: Set repository from dashboard: %s\n", cfg.SelectedRepository)
	}

	// Initialize other components
	view.configLoader = config.NewConfigLoader()
	view.repoSelector = components.NewRepositorySelector()
	view.configFileSelector = components.NewConfigFileSelector(80, 24)
	
	return view
}

func NewCreateRunViewWithCache(
	client APIClient,
	parentRuns []models.RunResponse,
	parentCached bool,
	parentCachedAt time.Time,
	parentDetailsCache map[string]*models.RunResponse,
	embeddedCache *cache.SimpleCache,
) *CreateRunView {
	debug.LogToFilef("DEBUG: Creating CreateView - parentRuns=%d, parentCached=%v, detailsCache=%d\n",
		len(parentRuns), parentCached, len(parentDetailsCache))

	view := &CreateRunView{
		client:             client,
		keys:               components.DefaultKeyMap,
		help:               help.New(),
		parentRuns:         parentRuns,
		parentCached:       parentCached,
		parentCachedAt:     parentCachedAt,
		parentDetailsCache: parentDetailsCache,
		cache:              embeddedCache,
		runType:            models.RunTypeRun,
		inputMode:          components.NormalMode,
	}

	// Initialize components
	// TODO: These functions are in create_input.go and create_config.go
	// view.initializeInputFields()
	// view.loadFormData()
	// TODO: This function is in create_repository.go
	// view.autofillRepository()

	// Initialize other components
	view.configLoader = config.NewConfigLoader()
	view.repoSelector = components.NewRepositorySelector()
	view.configFileSelector = components.NewConfigFileSelector(80, 24)

	return view
}

func (v *CreateRunView) Init() tea.Cmd {
	debug.LogToFile("DEBUG: CreateRunView.Init() called\n")
	
	// Ensure form data is loaded and fields are properly focused
	if v.inputMode == components.NormalMode && v.focusIndex < len(v.fields) {
		v.fields[v.focusIndex].Focus()
	}

	// Load file hash cache
	// TODO: This function is in create_submission.go
	return tea.Batch(
		// v.loadFileHashCache(),
		textinput.Blink,
		textarea.Blink,
	)
}

func (v *CreateRunView) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	var cmds []tea.Cmd

	switch msg := msg.(type) {
	case tea.WindowSizeMsg:
		return v, v.handleWindowSizeMsg(msg)
		
	case tea.KeyMsg:
		// Handle keyboard input based on current mode
		// TODO: These functions are in create_input.go
		// switch v.inputMode {
		// case components.InsertMode:
			// return v.handleInsertMode(msg)
		// case components.NormalMode:
			// return v.handleNormalMode(msg)
		// case components.ErrorMode:
			// return v.handleErrorMode(msg)
		// }

	// TODO: Message handlers moved to other files
	// case runCreatedMsg:
		// TODO: This function is in create_submission.go
		// return v.handleRunCreated(msg)
		
	// case repositorySelectedMsg:
		// TODO: This function is in create_repository.go
		// return v.handleRepositorySelected(msg)
		
	// case configLoadedMsg:
		// TODO: This function is in create_config.go
		// v.populateFormFromConfig(msg.config, msg.filePath)
		// v.currentFileHash = msg.fileHash
		// return v, nil
		
	// case configLoadErrorMsg:
		// v.error = msg.err
		// v.initErrorFocus()
		// return v, nil
		
	// case clipboardResultMsg:
		// if msg.success {
			// v.yankBlink = true
			// v.yankBlinkTime = time.Now()
			// TODO: These functions are in create_messages.go
			// return v, tea.Batch(v.startYankBlinkAnimation(), v.startClearStatusTimer())
		// }
		// return v, nil
		
	// case yankBlinkMsg:
		// Single blink: toggle off after being on
		// if v.yankBlink {
			// v.yankBlink = false // Turn off after being on - completes the single blink
		// }
		// return v, nil
		
	// case clearStatusMsg:
		// v.yankBlink = false
		// return v, nil
	}

	return v, tea.Batch(cmds...)
}

func (v *CreateRunView) handleWindowSizeMsg(msg tea.WindowSizeMsg) tea.Cmd {
	v.width = msg.Width
	v.height = msg.Height
	
	// Update component dimensions
	if v.configFileSelector != nil {
		v.configFileSelector.SetDimensions(v.width, v.height)
	}
	
	return nil
}

// clearAllFields clears all input fields
func (v *CreateRunView) clearAllFields() {
	for i := range v.fields {
		v.fields[i].SetValue("")
	}
	v.promptArea.SetValue("")
	v.contextArea.SetValue("")
}

// initErrorFocus saves the current focus state and switches to error mode
func (v *CreateRunView) initErrorFocus() {
	v.prevFocusIndex = v.focusIndex
	v.prevBackButtonFocused = v.backButtonFocused
	v.prevSubmitButtonFocused = v.submitButtonFocused
	v.inputMode = components.NormalMode // Error mode doesn't exist, keep in normal mode
	v.errorButtonFocused = true
	v.errorRowFocused = false
}